package model.player;

import java.util.ArrayList; 

import exception.GameException;
import exception.InvalidCardException;
import exception.InvalidMarbleException;
import model.Colour;
import model.card.*;

@SuppressWarnings("unused")
public class Player {
	
    private final String name;
    private final Colour colour;
    private ArrayList<Card> hand;
    private final ArrayList<Marble> marbles;  //Home Zone
    private Card selectedCard;
	private final ArrayList<Marble> selectedMarbles;

    public Player(String name, Colour colour) {
    	
        this.name = name;
        this.colour = colour;
        this.hand = new ArrayList<>();
        this.selectedMarbles = new ArrayList<>();
        this.marbles = new ArrayList<>();
        
        for (int i = 0; i < 4; i++) {
            this.marbles.add(new Marble(colour));
        }
        
        //default value
        this.selectedCard = null;
    }

    public String getName() {return name;}

    public Colour getColour() {return colour;}

    public ArrayList<Card> getHand() {return hand;}

    public void setHand(ArrayList<Card> hand) {this.hand = hand;}
    
    public ArrayList<Marble> getMarbles() {return marbles;}
    
    public Card getSelectedCard() {return selectedCard;}
    
    //Milestone 2 Methods
    
    public void regainMarble(Marble marble) {this.marbles.add(marble);}
    
    public Marble getOneMarble() {
    	
    	if (this.marbles.size() == 0) return null;
    	else return this.getMarbles().get(0);
    	
    }
    
    public void selectCard(Card card) throws InvalidCardException{
    	
    	if (this.hand.contains(card)) this.selectedCard=card;
    	else throw new InvalidCardException("The card does not belong to your hand.");
    	
    }
    
    public void selectMarble(Marble marble) throws InvalidMarbleException {
    	
   	 if (this.selectedMarbles.size() >= 2) throw new InvalidMarbleException("Cannot select more than two marbles.");
   	 else if (!(selectedMarbles.contains(marble))) this.selectedMarbles.add(marble);
   	 
   }
    
    public void deselectAll() {
        
        this.selectedCard = null;
        this.selectedMarbles.clear();
    }
    
    public void play() throws GameException{
    	
    	if (selectedCard == null) {throw new InvalidCardException();}
    	
    	else{
    		
    		if (!selectedCard.validateMarbleSize(selectedMarbles)) {throw new InvalidMarbleException("Invalid size of marbles.");}
    		
    		if (!selectedCard.validateMarbleColours(selectedMarbles)) {throw new InvalidMarbleException("Invalid colours of marbles.");}
    		
    		if (selectedCard.validateMarbleColours(selectedMarbles) && selectedCard.validateMarbleSize(selectedMarbles)) {selectedCard.act(selectedMarbles);}
    	}
    }

}
