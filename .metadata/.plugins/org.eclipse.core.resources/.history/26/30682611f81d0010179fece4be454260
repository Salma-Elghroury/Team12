package engine;

import java.io.IOException; 
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

import engine.board.Board;
import exception.*;
import model.Colour;
import model.card.*;
import model.card.Deck;
import model.player.*;

@SuppressWarnings("unused")
public class Game implements GameManager {
	
    private final Board board;
    private final ArrayList<Player> players;
	private int currentPlayerIndex;
    private final ArrayList<Card> firePit;
    private int turn;

    public Game(String playerName) throws IOException {
    	
        turn = 0;
        currentPlayerIndex = 0;
        firePit = new ArrayList<>();

        ArrayList<Colour> colourOrder = new ArrayList<>();
        
        colourOrder.addAll(Arrays.asList(Colour.values()));
        
        Collections.shuffle(colourOrder);
        
        this.board = new Board(colourOrder, this);
        
        Deck.loadCardPool(this.board, (GameManager)this);
        
        this.players = new ArrayList<>();
        this.players.add(new Player(playerName, colourOrder.get(0)));
        
        for (int i = 1; i < 4; i++) {this.players.add(new CPU("CPU " + i, colourOrder.get(i), this.board));}
        
        for (int i = 0; i < 4; i++) {this.players.get(i).setHand(Deck.drawCards());}
        
    }
    
    public Board getBoard() {return board;}

    public ArrayList<Player> getPlayers() {return players;}

    public ArrayList<Card> getFirePit() {return firePit;}
    
    //Milestone 2 Methods
    
    public void selectCard(Card card) throws InvalidCardException {
    	
    	try {players.get(currentPlayerIndex).selectCard(card);}
    	
    	catch (InvalidCardException e){System.out.println(e.getMessage());}
    }
    
    public void selectMarble(Marble marble) throws InvalidMarbleException {
    	
        players.get(currentPlayerIndex).selectMarble(marble);
    }
    
    public void deselectAll() throws InvalidCardException, InvalidMarbleException {
    	
    	Player currentPlayer = this.players.get(0);
    	currentPlayer.selectCard(null);
    	currentPlayer.selectMarble(null);
    }
    
    public void editSplitDistance(int splitDistance) throws SplitOutOfRangeException{
    	
    	if(1<=splitDistance && splitDistance<=6) {this.board.setSplitDistance(splitDistance);}
    	
    	else {throw new SplitOutOfRangeException("The split is outside the appropriate 1ï¿½6 range");}
    }
    
    public boolean canPlayTurn(){
    	
    	if (players.get(currentPlayerIndex).getHand().size()==0) {return false ;} //What does turn refer to???? and why is currentPlayerIndex referring to the NEXT player??
    	else if (this.turn + this.players.get(currentPlayerIndex).getHand().size() == 4) {return false ;}
    	return true;
    }
    
    public void playPlayerTurn() throws GameException {
        if (!canPlayTurn()) {
            endPlayerTurn();
            return;
        }
        Colour activeColour = getActivePlayerColour();
        for (int i = 0; i < players.size(); i++) {
            if (players.get(i).getColour() == activeColour) {
                players.get(i).play();
            }
        }
        endPlayerTurn();
    }
    
    public void endPlayerTurn() throws InvalidCardException, InvalidMarbleException {
    	
    	Player currentPlayer = this.players.get(currentPlayerIndex);
    	
    	this.firePit.add(currentPlayer.getSelectedCard());
    	
    	this.deselectAll();
    	
    	if (this.currentPlayerIndex < this.players.size()) {this.currentPlayerIndex ++ ; turn ++ ;}
    	
    	else {
    		
    		this.currentPlayerIndex = 0 ; 
    		turn = 0 ; 
    		
    		for (int i = 0 ; i < this.players.size() ; i++) {
    			
    			if (Deck.getPoolSize() < 4) {Deck.refillPool(firePit); this.firePit.clear();}
    			
    			players.get(i).setHand(Deck.drawCards());
    		}
    	
    	}
    	
    }
    
    public Colour checkWin(){
    	for(int i=0; i<this.board.getSafeZones().size();i++){
    		if(this.board.getSafeZones().get(i).isFull()){
    			return this.board.getSafeZones().get(i).getColour();
    		}
    	}
    	return null;
    }
    
    public void sendHome (Marble marble) {
    	
    	ArrayList<Player> allPlayers = this.getPlayers();
    	Player player;
    	
    	for (int i = 0 ; i < allPlayers.size() ; i++) {
    		
    		if(allPlayers.get(i).getColour() == marble.getColour()) {
    			
    			player = allPlayers.get(i);
    			player.getMarbles().add(marble);
    		}
    	}
    }
    
    public void fieldMarble() throws CannotFieldException, IllegalDestroyException{
    	
    	if (players.get(currentPlayerIndex).getMarbles().size() == 0)
    		
    		throw new CannotFieldException();
    	
    	else{
    		
    		try{
    			board.sendToBase(players.get(currentPlayerIndex).getMarbles().get(0));
    			players.get(currentPlayerIndex).getMarbles().remove(0);
    		}
    		
    		catch (IllegalDestroyException e){}
    	}
    }
    
    public void discardCard(Colour colour) throws CannotDiscardException {
        Player targetPlayer = null;
        for (int i = 0; i < players.size(); i++) {
            Player player = players.get(i);
            if (player.getColour().equals(colour)) {
                targetPlayer = player;
                break;
            }
        }
        ArrayList<Card> hand = targetPlayer.getHand();
        if (hand.isEmpty()) {
            throw new CannotDiscardException("The player has no cards in hand to discard.");
        }
        int randomIndex = (int) (Math.random() * hand.size());
        Card cardToDiscard = hand.get(randomIndex);
        hand.remove(cardToDiscard);
        firePit.add(cardToDiscard);
    }
    
    public void discardCard() throws CannotDiscardException {
    	
	    ArrayList<Colour> otherColours = new ArrayList<>();
	    ArrayList<Colour> allColours = new ArrayList<>();
	    allColours.add(Colour.RED);
	    allColours.add(Colour.BLUE);
	    allColours.add(Colour.GREEN);
	    allColours.add(Colour.YELLOW);
	    
	    for (int i = 0; i < allColours.size(); i++) {
	    	
	        Colour colour = allColours.get(i);
	        if (!colour.equals(players.get(currentPlayerIndex).getColour())) {otherColours.add(colour);}
	    }
	    
	    int randomColourIndex = (int) (Math.random() * otherColours.size());
	    Colour randomColour = otherColours.get(randomColourIndex);
	    discardCard(randomColour);}
    
    public Colour getActivePlayerColour(){return players.get(currentPlayerIndex).getColour();}
    
    public Colour getNextPlayerColour(){
    	
    	if (currentPlayerIndex==3) return players.get(0).getColour();
    	return players.get(currentPlayerIndex+1).getColour();
    }
   
}
